<<<<<<< HEAD
=======
	
>>>>>>> 6d1d721fb77ad1cff38b8249d3845d10440bb5f3
#Access kubernetes dashboard ( DEPLOY THE OFFICIAL KUBERNETES DASHBOARD )
# https://archive.eksworkshop.com/beginner/040_dashboard/dashboard/   (Normal approach-- port forwarding )
# https://upcloud.com/resources/tutorials/deploy-kubernetes-dashboard
# https://surajblog.medium.com/simplified-deployment-of-kubernetes-dashboard-with-alb-ingress-controller-bf3396c0dc54
# https://surajblog.medium.com/simplified-deployment-of-kubernetes-dashboard-with-alb-ingress-controller-bf3396c0dc54 (ALB approach)

# Install Metrics Server
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

# install kubernetes dashboard
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml

# Accessing Dashboard

service-role.yaml 
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kubernetes-dashboard

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin # name: view if read only user required
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kubernetes-dashboard

---

apiVersion: v1
kind: Secret
metadata:
  name: admin-user
  namespace: kubernetes-dashboard
  annotations:
    kubernetes.io/service-account.name: "admin-user"   
type: kubernetes.io/service-account-token

# Create ALB Ingress Resource for Kubernetes-dashboard
# ingress.yml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    alb.ingress.kubernetes.io/backend-protocol: HTTPS
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:238393102293:certificate/3c01123f-6dd0-4661-b3a6-1a68f681e297
    alb.ingress.kubernetes.io/group.name: myapplication.web
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "15"
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTPS
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "4"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/load-balancer-name: k8s-dashboard
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/success-codes: "200"
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "3"
    external-dns.alpha.kubernetes.io/hostname: k8sdashboard.eficensittest.com
  name: my-ingress
  namespace: kubernetes-dashboard
spec:
  ingressClassName: my-aws-ingress-class
  rules:
    - host: k8sdashboard.eficensittest.com
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: kubernetes-dashboard
              port:
                number: 443
                
# k8s dashboard password
Deploy and Access the Kubernetes Dashboard | Kubernetes
kubectl get secret admin-user -n kubernetes-dashboard -o jsonpath={".data.token"} | base64 -d
---------------------------------------------------------------------------------------------------------
# analysis for spark-prod
# kubernetes Dashboard access manually using command line 
https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/
aws configure
aws eks update-kubeconfig --region us-east-1 --name spark-prod 
kubectl config use-context arn:aws:eks:us-east-1:424258464218:cluster/spark-prod
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
# read only access
kubectl -n prod create token dashboard-view-only
kubectl proxy or kubectl proxy --port=8888
http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/pod?namespace=prod
# admin access 
kubectl create serviceaccount dashboard-admin -n snoops-dev
kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=snoops-dev:dashboard-admin 
kubectl -n snoops-dev create token dashboard-admin 
kubectl proxy or kubectl proxy --port=8888
http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/pod?namespace=snoops-dev
----------------------------------------------------------------------------------------------------------------
# analysis for snoops-dev
# install kubernetes dashboard
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
kubectl get svc -n kubernetes-dashboard
kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard   # LoadBalancer
kubectl get svc -n kubernetes-dashboard
nslookup aff5dfd13665f4b1da603a22daf8ea36-1055103295.us-east-1.elb.amazonaws.com
aws eks get-token --cluster-name snoops-dev | jq -r '.status.token'

